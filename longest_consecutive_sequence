// longest_consecutive_sequence

#include<iostream>
#include<unordered_map>
#include<vector>
using namespace std;

vector<int>longestConsecutiveIncreasingSequence(int *arr,int n){
    unordered_map<int,bool> visitedElemebts ;
    unordered_map<int,int> elementsToIndexMapping ;
    for(int i = 0; i < n; i++){
        elementsToIndexMapping[arr[i]] = i ;
        if(visitedElemebts.count(arr[i]) == 0){
            visitedElemebts[arr[i]] = true ;
        }
    }
    vector<int> longestSequence ;
    int globalMaxSequenceLength = 1 ;
    int globalMinStartIndex = 0 ;
        for(int i = 0; i < n; i++){
            int num   = arr[i] ;
            int currentMinStartIndex = i ;
            int count = 0 ;
            int tempNum = num ;
            //forward
            while(visitedElemebts.count(tempNum) == 1 && visitedElemebts[tempNum] == true){
                visitedElemebts[tempNum] = false ;
                count++   ;
                tempNum++ ;
            }
            // backward
            tempNum = num -1 ;
            while(visitedElemebts.count(tempNum) == 1 && visitedElemebts[tempNum] == true){
                visitedElemebts[tempNum] = false ;
                count++   ;
                currentMinStartIndex = elementsToIndexMapping[tempNum] ;
                tempNum-- ;
            }
            if(count > globalMaxSequenceLength){
                globalMaxSequenceLength = count ;
                globalMinStartIndex = currentMinStartIndex ;
            }
            else if(count == globalMaxSequenceLength){
                if(currentMinStartIndex < globalMinStartIndex){
                    globalMinStartIndex = currentMinStartIndex ;
                }
            }
        }
        int globalStartNum = arr[globalMinStartIndex] ;
        longestSequence.push_back(globalStartNum) ;
        globalMaxSequenceLength-- ;

        while(globalMaxSequenceLength != 0){
            globalStartNum++ ;
            longestSequence.push_back(globalStartNum) ;
            globalMaxSequenceLength-- ;
        }
        return longestSequence ;
}
int main(){
  int size;
  
  cin >> size;
  int* arr = new int[size];
  for(int i = 0; i < size; i++){
    cin >> arr[i];
  }
  vector<int> ans = longestConsecutiveIncreasingSequence(arr,size);
  
  for (auto it = ans.cbegin(); it != ans.cend(); it++) {
	cout << *it <<endl;
  }

  delete arr;
}
